(defun tableau-html ()
         (interactive)
         "Remplacer les tableaux POD par leur équivalent HTML"
  (tableau-conv 'html "<pre>" "</pre>" "table.html")
)
(defun tableau-latex ()
         (interactive)
         "Remplacer les tableaux POD par leur équivalent LATEX"
  (tableau-conv 'latex "\\begin{verbatim}" "\\end{verbatim}" "table.latex")
)

(defun tableau-conv (type balise1 balise2 buffer-annexe)
  (let   ((buffer-en-cours (buffer-name))
          (tableau-debut 0)
          (tableau-fin   0)
          (limite-rech (point-max)))
     ;(message "on commence")
     (beginning-of-buffer)
     (while (re-search-forward "^ *\\+[-+]+\\+$" (point-max) t 1)
       ;(message "dans la boucle %d" (point))
       ;(save-excursion (beginning-of-line)
       ;                (setq tableau-debut (point)))
       (save-excursion (search-backward balise1)
                       (setq tableau-debut (point)))
       ;(message "dans la boucle 1 %d %d" tableau-debut (point))
       (forward-line)
       (search-forward "|"  (point-max) t 1)
       (forward-char 1)
       ;(message "dans la boucle 2 %d" (point))
       (table-recognize-table)
       ;(message "dans la boucle 3 %d" (point))
       (table-generate-source type)
       ;(message "dans la boucle 4")
       (search-forward balise2)
       ;(message "dans la boucle 5")
       (setq tableau-fin   (point))
       (goto-char tableau-debut)
       ;(message "%d %d" tableau-debut tableau-fin)
       (delete-char (- tableau-fin tableau-debut))
       (if (eq type 'html)
         (progn
           (switch-to-buffer buffer-annexe)
           (beginning-of-buffer)
           (replace-string "&nbsp;" " ")
           (beginning-of-buffer)
           (replace-string "<br />" " ")
           (switch-to-buffer buffer-en-cours)
       ))
       (if (eq type 'latex)
         (progn
           (switch-to-buffer buffer-annexe)
           (beginning-of-buffer)
           (forward-line)
           (insert "\\vspace{5mm}" ?\n)
           (end-of-buffer)
           (insert "\\vspace{5mm}" ?\n)
           (switch-to-buffer buffer-en-cours)
       ))
       (save-excursion (insert-buffer-substring buffer-annexe))
       ;(save-excursion (beginning-of-line)
       ;                (setq tableau-fin (point)))
     )
     ;(message "on a fini")
  )
)
(defun tableau-html1 ()
         (interactive)
         "Remplacer un tableau POD par son équivalent HTML"
  (let   ((buffer-en-cours (buffer-name))
          (tableau-debut 0)
          (tableau-fin   0))
     (beginning-of-buffer)
      (re-search-forward "^ *\\+----" (point-max) t 1)
       ;(save-excursion (beginning-of-line)
       ;                (setq tableau-debut (point)))
       (save-excursion (search-backward "<pre>")
                       (setq tableau-debut (point)))
       (forward-line)
       (search-forward "|"  (point-max) t 1)
       (forward-char 1)
       (table-recognize-table)
       (table-generate-source 'html)
       (search-forward "</pre>")
       (setq tableau-fin   (point))
       (goto-char tableau-debut)
       (delete-char (- tableau-fin tableau-debut))
       (switch-to-buffer "table.html")
       (beginning-of-buffer)
       (replace-string "&nbsp;" " ")
       (beginning-of-buffer)
       (replace-string "<br />" " ")
       (switch-to-buffer buffer-en-cours)
       (save-excursion (insert-buffer-substring "table.html"))
  )
)
